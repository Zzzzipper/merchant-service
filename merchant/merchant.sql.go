// Code generated by sqlc. DO NOT EDIT.
// source: merchant.sql

package merchant

import (
	"context"

	"github.com/jackc/pgtype"
)

const addMerchant = `-- name: AddMerchant :one
INSERT INTO merchants (
  full_name,
  url,
  partner_id
) VALUES (
  $1, 
  $2,
  $3
)
RETURNING id, create_time, full_name, url, partner_id
`

type AddMerchantParams struct {
	FullName  string
	Url       string
	PartnerID pgtype.UUID
}

func (q *Queries) AddMerchant(ctx context.Context, arg AddMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, addMerchant, arg.FullName, arg.Url, arg.PartnerID)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.Url,
		&i.PartnerID,
	)
	return i, err
}

const addPartner = `-- name: AddPartner :one
INSERT INTO partners (
  full_name,
  url,
  role
) VALUES (
  $1, 
  $2,
  $3
)
RETURNING id, create_time, full_name, url, api_token, role
`

type AddPartnerParams struct {
	FullName string
	Url      string
	Role     Role
}

func (q *Queries) AddPartner(ctx context.Context, arg AddPartnerParams) (Partner, error) {
	row := q.db.QueryRowContext(ctx, addPartner, arg.FullName, arg.Url, arg.Role)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.Url,
		&i.ApiToken,
		&i.Role,
	)
	return i, err
}

const deleteMerchant = `-- name: DeleteMerchant :one
DELETE FROM merchants
WHERE id = $1
RETURNING id, create_time, full_name, url, partner_id
`

func (q *Queries) DeleteMerchant(ctx context.Context, id pgtype.UUID) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, deleteMerchant, id)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.Url,
		&i.PartnerID,
	)
	return i, err
}

const deletePartner = `-- name: DeletePartner :one
DELETE FROM partners
WHERE id = $1
RETURNING id, create_time, full_name, url, api_token, role
`

func (q *Queries) DeletePartner(ctx context.Context, id pgtype.UUID) (Partner, error) {
	row := q.db.QueryRowContext(ctx, deletePartner, id)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.CreateTime,
		&i.FullName,
		&i.Url,
		&i.ApiToken,
		&i.Role,
	)
	return i, err
}
